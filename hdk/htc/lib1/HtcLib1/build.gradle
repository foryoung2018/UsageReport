// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:0.14.2"
    }
}

allprojects {
    apply from: "${project.rootDir}/common.gradle"
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }
    repositories {
        jcenter()
        mavenServer.each{ urls-> maven{ url urls.value.toString() } }
    }
}

apply plugin: 'android-library'
apply from: "${project.projectDir}/extraLibraries.gradle"

dependencies {
    //compile fileTree(dir: "libs", include: "*.jar")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcUPManager")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcCrypto")
    compile project(":..:..:..:..:hdk:htc:lib2:HtcUPServiceClient")
    compile project(":..:..:..:..:hdk:htc:lib1:VideoHighlights")
    compile project(":..:..:..:..:hdk:htc:lib2:OpenSense")
    compile project(":..:..:..:..:hdk:htc:lib1:PanoViewer")
    compile project(":..:..:..:..:hdk:htc:lib0:HDKUtil")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcTheme")
    compile project(":..:..:..:..:hdk:htc:lib1:MediaManager")
    compile project(":..:..:..:..:hdk:htc:lib2:HtcConfiguration")
    compile project(":..:..:..:..:hdk:htc:lib1:Media:HtcExifInterface")
    compile project(":..:..:..:..:hdk:htc:lib1:WeatherLib1")
    compile project(":..:..:..:..:hdk:htc:lib0:HtcDebugFlag")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcCommonControl")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcZero")
    compile project(":..:..:..:..:hdk:htc:lib0:Customization")
    compile project(":..:..:..:..:hdk:htc:lib1:GIFModule")
    compile project(":..:..:..:..:hdk:htc:lib2:PhotoPlatformCacheManager")
    compile project(":..:..:..:..:hdk:htc:lib1:ProviderSettings")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcMp4Parser")
    compile project(":..:..:..:..:hdk:htc:lib1:Frisbee")
    compile project(":..:..:..:..:hdk:htc:lib0:Media:HtcZoeUtil")
    compile project(":..:..:..:..:hdk:htc:lib1:Media:HtcZoeExtractor")
    compile project(":..:..:..:..:hdk:htc:lib1:HtcAccount")

    extraLibrary.each{compile it}
}

android {
    compileSdkVersion "${project.ext.sdkVersion}"
    buildToolsVersion "${project.ext.toolVersion}"

    defaultConfig {
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions','TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        xmlReport false
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")

       // set to true to have all release builds run lint on issues with severity=fatal

       // and abort the build (controlled by abortOnError above) if fatal issues are found

       checkReleaseBuilds true

        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        ignore 'TypographyQuotes'
    }

    buildTypes {
        release {
    //        minifyEnabled true
    //        proguard.each{proguardFile file(it)}
    //        signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            jniLibs.srcDirs = ["libs"]
            resources.srcDirs = ["src"]
            aidl.srcDirs = ["src"]
            renderscript.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ["assets"]
        }
    }

}
