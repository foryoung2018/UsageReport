
package com.htc.lib1.cs.app;

import android.app.Activity;
import android.app.DialogFragment;
import android.app.FragmentManager;
import android.text.TextUtils;

import com.htc.lib1.cs.logging.CommLoggerFactory;
import com.htc.lib1.cs.logging.HtcLogger;

/**
 * Helper class to show or dismiss dialogs.
 * <p>
 * The naming follows a general rule: if a helper class includes only static
 * methods it's named as {@code Utils}, and if it needs an instance to work
 * (including singleton implementation) it's named as {@code Helper}.
 * </p>
 */
public class DialogFragmentUtils {
    private static final String TAG_DIALOG = "DIALOG_TAG:";
    private static HtcLogger sLogger = new CommLoggerFactory(DialogFragmentUtils.class).create();

    /**
     * Show a given dialog upon a given activity.
     * 
     * @param activity The parent activity that dialog showing upon.
     * @param dialogFragment The dialog instance to be shown.
     * @param singleInstance When set to {@code true}, the dialog tag will be
     *            based on the class name but not instance. It ensures only
     *            single instance of a specific type of {@link DialogFragment}
     *            is shown.
     * @return The fragment tag generated by
     *         {@link #getNameTag(DialogFragment, boolean)}.
     */
    public static String showDialog(Activity activity, DialogFragment dialogFragment,
            boolean singleInstance) {
        String tag = getNameTag(dialogFragment, singleInstance);
        FragmentManager fm = activity.getFragmentManager();
        sLogger.verbose("showDialog: activity = ", activity, ", dialog = ", dialogFragment,
                ", singleInstance = ", singleInstance, ", tag = ", tag, ", fragmentManager = ", fm);

        /*
         * If this method is invoked right after a dismiss request,
         * FragmementManager might have scheduled to removed the dialog but not
         * done it yet. Hence if we found an existing dialog with the same tag,
         * the only way to ensure the dialog is kept showing is removing
         * existing one and show a new dialog instance.
         */
        DialogFragment existingDialogFragment;
        if ((existingDialogFragment = (DialogFragment) fm.findFragmentByTag(tag)) != null) {
            sLogger.verbose("Removing existing dialog.");
            existingDialogFragment.dismiss();

            if (existingDialogFragment == dialogFragment) {
                sLogger.warning("Duplicate show request to an existing DialogFragment instance. ",
                        "It might cause unexpected behavior due to the fact that ",
                        "FragmentManager doesn't make transactions immediately and ",
                        "might cause concurrency issue when multiple operations are applied ",
                        "to the same instance.");
            }
        }

        // Show the dialog.
        sLogger.verbose("Showing ", tag);
        dialogFragment.show(fm, tag);
        return tag;
    }

    /**
     * Overloaded method for multiple instance dialogs.
     * 
     * @param activity The parent activity that dialog showing upon.
     * @param dialogFragment The dialog instance to be shown.
     * @return The fragment tag generated by
     *         {@link #getNameTag(DialogFragment, boolean)}.
     */
    public static String showDialog(Activity activity, DialogFragment dialogFragment) {
        return showDialog(activity, dialogFragment, false/* singleInstance */);
    }

    /**
     * Dismiss the dialog fragment with given {@code tag}.
     * 
     * @param activity The parent activity that dialog showing upon.
     * @param tag The tag of the dialog fragment.
     */
    public static void dismissDialog(Activity activity, String tag) {
        sLogger.verbose("dismissDialog: activity = ", activity, ", tag = ", tag);

        // Check existence.
        DialogFragment dialogFragment;
        if ((dialogFragment = (DialogFragment) activity.getFragmentManager().findFragmentByTag(tag)) != null) {
            sLogger.verbose("Dismissing ", dialogFragment);
            dialogFragment.dismiss();
        }
    }

    /**
     * Dismiss the given dialog.
     * 
     * @param activity The parent activity that dialog showing upon.
     * @param dialogFragment The dialog instance to dismiss.
     * @param singleInstance Must be the same value as what the dialog used to
     *            show.
     */
    public static void dismissDialog(Activity activity, DialogFragment dialogFragment,
            boolean singleInstance) {
        String tag = getNameTag(dialogFragment, singleInstance);
        sLogger.verbose("dismissDialog: activity = ", activity, ", dialog = ", dialogFragment,
                ", singleInstance = ", singleInstance, ", tag = ", tag);

        // Check existence.
        if (activity.getFragmentManager().findFragmentByTag(tag) != null) {
            sLogger.verbose("Dismissing ", dialogFragment);
            dialogFragment.dismiss();
        }
    }

    /**
     * Overloaded method for multiple instance dialogs.
     * 
     * @param activity The parent activity that dialog showing upon.
     * @param dialogFragment The dialog instance to be shown.
     */
    public static void dismissDialog(Activity activity, DialogFragment dialogFragment) {
        dismissDialog(activity, dialogFragment, false /* singleInstance */);
    }

    /**
     * Get the name tag for a dialog fragment.
     * 
     * @param dialog Dialog to generate name tag.
     * @param singleInstance True for single instance name tag. A single
     *            instance name tag uses the class name as tag. Hence, for a
     *            specific type of fragment, there will be at most one instance
     *            showing; On the other hand, a regular name tag uses hash code
     *            so multiple instances are treated as different fragments and
     *            can co-exist.
     * @return Name tag used for fragment management.
     */
    public static String getNameTag(DialogFragment dialog, boolean singleInstance) {
        String tag = dialog.getTag();
        if (TextUtils.isEmpty(tag)) {
            if (singleInstance) {
                tag = TAG_DIALOG + dialog.getClass().getName();
            } else {
                tag = TAG_DIALOG + dialog.toString();
            }
        }
        return tag;
    }
}
